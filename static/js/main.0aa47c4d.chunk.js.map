{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","redux/action.js","redux/reducer.js","redux/store.js","redux/selectors.js","components/Filter/Filter.jsx","components/Button/Button.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsAction","addContact","createAction","name","number","payload","id","shortid","generate","changeFilter","deleteContact","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactReducer","devTools","process","persistor","persistStore","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","text","includes","getFilteredContacts","Filter","value","useSelector","dispatch","useDispatch","className","st","label","input","type","onChange","event","contactsActions","target","Button","props","ContactList","map","listItem","btn","onClick","handleDeleteContact","ContactForm","useState","contactName","setContactName","contactNumber","setContactNumber","nameId","contactPhoneNumberId","handleFormChange","resetForm","onSubmit","preventDefault","console","log","find","contact","toast","error","form","htmlFor","App","visibleContacts","container","title","subtitle","length","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0aa47c4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__3_wur\",\"name\":\"ContactList_name__1rD6t\",\"namber\":\"ContactList_namber__1yPPZ\",\"btn\":\"ContactList_btn__3OHeS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Kjln2\",\"title\":\"App_title__2-SHh\",\"subtitle\":\"App_subtitle__3T5WL\",\"btn\":\"App_btn__nb0bk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__QqJeF\",\"label\":\"Filter_label__2fyKi\",\"input\":\"Filter_input__3cmw9\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contact/add', (name, number) => ({\r\n  payload: { id: shortid.generate(), name, number },\r\n}));\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst deleteContact = createAction('contact/delete');\r\n\r\nconst contactsAction = { addContact, changeFilter, deleteContact };\r\n\r\nexport default contactsAction;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './action';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","export const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const getFilteredContacts = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(text =>\r\n      text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n  return getFilteredContacts(contacts);\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsActions from '../../redux/action';\r\nimport { getFilter } from '../../redux/selectors';\r\nimport st from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={st.label}>\r\n      Find contact\r\n      <input\r\n        className={st.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(contactsActions.changeFilter(event.target.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Button = ({ value, ...props }) => {\r\n  return <button {...props}>{value}</button>;\r\n};\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  value: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsActions from '../../redux/action';\r\nimport { getVisibleContacts } from '../../redux/selectors';\r\nimport Button from '../Button';\r\nimport st from './ContactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const handleDeleteContact = id => dispatch(contactsActions.deleteContact(id));\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={st.listItem}>\r\n          <span className={st.name}>{name}:</span>\r\n          <span className={st.number}>{number}</span>\r\n          <Button\r\n            type=\"button\"\r\n            className={st.btn}\r\n            onClick={() => handleDeleteContact(id)}\r\n            value=\"Delete\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsAction from '../../redux/action';\r\nimport { getContacts } from '../../redux/selectors';\r\nimport Button from '../Button';\r\nimport st from './ContactForm.module.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst ContactForm = () => {\r\n  const [contactName, setContactName] = useState('');\r\n  const [contactNumber, setContactNumber] = useState('');\r\n  const nameId = shortid.generate();\r\n  const dispatch = useDispatch();\r\n  const contactPhoneNumberId = shortid.generate();\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const handleFormChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setContactName(value);\r\n        break;\r\n      case 'number':\r\n        setContactNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(contactName, contactNumber);\r\n    if (contactName === '') {\r\n      toast.error('Enter contact name');\r\n      return;\r\n    }\r\n    if (contacts.find(contact => contact.name === contactName)) {\r\n      toast.error(`${contactName} is already exists`);\r\n      resetForm();\r\n      return;\r\n    }\r\n    dispatch(contactsAction.addContact(contactName, contactNumber));\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setContactName('');\r\n    setContactNumber('');\r\n  };\r\n  return (\r\n    <form onSubmit={handleFormSubmit} className={st.form} type=\"submit\">\r\n      <label htmlFor={nameId} className={st.label}>\r\n        Name\r\n        <input\r\n          className={st.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={contactName}\r\n          onChange={handleFormChange}\r\n          id={nameId}\r\n        />\r\n      </label>\r\n      <label htmlFor={contactPhoneNumberId} className={st.label}>\r\n        Phone Number\r\n        <input\r\n          className={st.input}\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={contactNumber}\r\n          onChange={handleFormChange}\r\n          id={contactPhoneNumberId}\r\n        />\r\n      </label>\r\n      <Button type=\"submit\" className={st.btn} value=\"Create contact\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts, getContacts } from './redux/selectors';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ContactForm from './components/ContactForm';\nimport st from './App.module.css';\n\nfunction App() {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const contacts = useSelector(getContacts);\n\n  return (\n    <div className={st.container}>\n      <h1 className={st.title}>PHONEBOOK</h1>\n      <ContactForm />\n      <h2 className={st.subtitle}>Contacts</h2>\n      {contacts.length > 1 && <Filter />}\n      {visibleContacts.length > 0 && <ContactList />}\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick={true}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './base.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1g8Dv\",\"label\":\"ContactForm_label__saz4S\",\"input\":\"ContactForm_input__qdoVS\",\"btn\":\"ContactForm_btn__mchYJ\",\"error\":\"ContactForm_error__2_xwq\"};"],"sourceRoot":""}